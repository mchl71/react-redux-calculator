{"version":3,"sources":["components/ButtonList.js","components/Display.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["ButtonList","onNumberButtonClick","onOperatorButtonClick","getResult","getDefaultState","buttons","i","push","className","value","key","onClick","map","button","Display","displayValue","App","this","props","React","Component","connect","state","buttonValue","operator","dispatch","event","type","payload","target","Boolean","window","location","hostname","match","initialStateButton","previousValue","previousOperator","evaluateInput","firstValue","secondValue","Number","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","action","Object","assign","result","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b605b2a2.chunk.js","sourcesContent":["import React from 'react'\r\nimport './ButtonList.css'\r\n\r\nconst ButtonList = ({ onNumberButtonClick, onOperatorButtonClick, getResult, getDefaultState }) => {\r\n\tlet buttons = []\r\n\tfor (let i = 0; i <= 9; i++) {\r\n\t\tbuttons.push(\r\n\t\t\t<button className='number' value={i} key={i} onClick={onNumberButtonClick}>{i}</button>\r\n\t\t)\r\n\t}\r\n\r\n\treturn (\r\n\t\t<div className='buttonListContainer'>\r\n\t\t\t<div className='listNumbers'>\r\n\t\t\t\t{\r\n\t\t\t\t\tbuttons.map(button => button)\r\n\t\t\t\t}\r\n\t\t\t</div>\r\n\t\t\t<div className='listOperators'>\r\n\t\t\t\t<button className='operator' value={\"+\"} onClick={onOperatorButtonClick}>{\"+\"}</button>\r\n\t\t\t\t<button className='operator' value={\"-\"} onClick={onOperatorButtonClick}>{\"-\"}</button>\r\n\t\t\t\t<button className='operator' value={\"*\"} onClick={onOperatorButtonClick}>{\"*\"}</button>\r\n\t\t\t\t<button className='operator' value={\"/\"} onClick={onOperatorButtonClick}>{\"/\"}</button>\r\n\t\t\t\t<button className='operator' value={\"=\"} onClick={getResult}>{\"=\"}</button>\r\n\t\t\t\t<button className='delete' value={\"delete\"} onClick={getDefaultState}>DEL</button>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default ButtonList","import React from 'react'\r\nimport './Display.css'\r\n\r\nconst Display = ({ displayValue }) => {\r\n\treturn (\r\n\t\t<div className='displayContainer'>\r\n\t\t\t{displayValue}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default Display","import React from 'react';\nimport { connect } from 'react-redux'\nimport ButtonList from '../components/ButtonList'\nimport Display from '../components/Display'\nimport './App.css';\n\nimport { handleNumberButtonClick, handleOperatorButtonClick, getResult, getDefaultState } from '../actions.js'\n\nconst mapStateToProps = state => {\n  return {\n    buttonValue: state.buttonValue,\n    displayValue: state.displayValue,\n    operator: state.operator\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    onNumberButtonClick: (event) => dispatch(handleNumberButtonClick(event.target.value)),\n    onOperatorButtonClick: (event) => dispatch(handleOperatorButtonClick(event.target.value)),\n    getResult: () => dispatch(getResult()),\n    getDefaultState: () => dispatch(getDefaultState())\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    const {displayValue, onNumberButtonClick, onOperatorButtonClick, getResult, getDefaultState} = this.props\n    return (\n      <div className=\"app\">\n        <header>Calculator</header>\n        <div className='appContainer'>\n          <Display displayValue={displayValue}/>\n          <ButtonList \n            onNumberButtonClick={onNumberButtonClick} \n            onOperatorButtonClick={onOperatorButtonClick} \n            getResult={getResult}\n            getDefaultState={getDefaultState}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { HANDLE_NUMBER_BUTTON_CLICK, HANDLE_OPERATOR_BUTTON_CLICK, GET_RESULT, GET_DEFAULT_STATE } from './constants.js'\r\n\r\nexport const handleNumberButtonClick = (value) => {\r\n\treturn {\r\n\t\ttype: HANDLE_NUMBER_BUTTON_CLICK,\r\n\t\tpayload: value\r\n\t}\r\n}\r\n\r\nexport const handleOperatorButtonClick = (value) => {\r\n\treturn {\r\n\t\ttype: HANDLE_OPERATOR_BUTTON_CLICK,\r\n\t\tpayload: value\r\n\t}\r\n}\r\n\r\nexport const getResult = () => {\r\n\treturn {\r\n\t\ttype: GET_RESULT\r\n\t}\r\n}\r\n\r\nexport const getDefaultState = () => {\r\n\treturn {\r\n\t\ttype: GET_DEFAULT_STATE\r\n\t}\r\n}","export const HANDLE_NUMBER_BUTTON_CLICK = 'HANDLE_NUMBER_BUTTON_CLICK'\r\nexport const HANDLE_OPERATOR_BUTTON_CLICK = 'HANDLE_OPERATOR_BUTTON_CLICK'\r\nexport const GET_RESULT = 'GET_RESULT'\r\nexport const GET_DEFAULT_STATE = 'GET_DEFAULT_STATE'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { HANDLE_NUMBER_BUTTON_CLICK, HANDLE_OPERATOR_BUTTON_CLICK, GET_RESULT, GET_DEFAULT_STATE } from './constants.js'\r\n\r\nconst initialStateButton = {\r\n\tbuttonValue: '',\r\n\tpreviousValue: '',\r\n\tdisplayValue: '',\r\n\toperator: '',\r\n\tpreviousOperator: ''\r\n}\r\n\r\nconst evaluateInput = (operator, firstValue, secondValue) => {\r\n\tswitch (operator) {\r\n\t\tcase '+':\r\n\t\t\treturn Number(firstValue) + Number(secondValue)\r\n\t\tcase '-':\r\n\t\t\treturn Number(firstValue) - Number(secondValue)\r\n\t\tcase '*':\r\n\t\t\treturn Number(firstValue) * Number(secondValue)\r\n\t\tcase '/':\r\n\t\t\treturn Number(firstValue) / Number(secondValue)\r\n\t\tdefault:\r\n\t\t\treturn\r\n\t}\r\n}\r\n\r\nexport const setButtonValue = (state=initialStateButton, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase HANDLE_NUMBER_BUTTON_CLICK:\r\n\t\t\treturn Object.assign({}, state, {buttonValue: action.payload, displayValue: state.displayValue + action.payload})\r\n\t\tcase HANDLE_OPERATOR_BUTTON_CLICK:\r\n\t\t\tif (state.operator) {\r\n\t\t\t\tconst result = evaluateInput(state.operator, state.previousValue, state.displayValue)\r\n\t\t\t\treturn Object.assign({}, state, {operator: action.payload, previousValue: result, displayValue: ''})\r\n\t\t\t} else {\r\n\t\t\t\treturn Object.assign({}, state, {operator: action.payload, previousValue: state.displayValue, displayValue: ''})\r\n\t\t\t}\r\n\t\tcase GET_RESULT:\r\n\t\t\tif (state.previousValue && state.operator && state.displayValue) {\r\n\t\t\t\tconst result = evaluateInput(state.operator, state.previousValue, state.displayValue)\r\n\t\t\t\treturn Object.assign({}, state, {previousValue: result, displayValue: result, operator: ''})\r\n\t\t\t} else {\r\n\t\t\t\treturn state\r\n\t\t\t}\r\n\t\tcase GET_DEFAULT_STATE:\r\n\t\t\treturn Object.assign({}, initialStateButton)\r\n\t\tdefault:\r\n\t\t\treturn state\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\nimport { createStore, compose } from 'redux';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { setButtonValue } from './reducers'\n\nconst composeEnhancers = \twindow.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(setButtonValue, composeEnhancers())\n\nReactDOM.render(\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}